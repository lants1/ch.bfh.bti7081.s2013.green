package spitapp.gui;

import spitapp.controller.AppointmentChangedEvent;
import spitapp.controller.AppointmentController;
import spitapp.core.model.ExpensesEntry;
import spitapp.core.model.Patient;

import java.util.*;

import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.validator.AbstractValidator;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.server.SystemError;
import com.vaadin.server.UserError;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.TextField;

/**
 * class to display the expenses of a patient
 * @author jaggr2, vonop1
 *
 */
public class ExpensesGuiHandler extends DetailGuiHandler {

	/**
	 * the generated Serial
	 */
	private static final long serialVersionUID = 3873228414539845811L;
	
	/**
	 * the components
	 */
	private AbsoluteLayout mainLayout;
	private Label labelNew;
	private Label labelCurrency;
	private Button buttonAdd;
	private Button buttonDelete;
	private TextField textfieldAmount;
	private TextField textfieldExpensetype;
	private Table tableExpenses;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ExpensesGuiHandler(AppointmentController controller) {
		super(controller);
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	/**
	 * Builds the Layout together
	 * @return the Layout as AbsoluteLayout
	 */
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		setWidth("100.0%");
		setHeight("100.0%");
		
		// table_expenses
		tableExpenses = new Table();
		tableExpenses.setWidth("400px");
		tableExpenses.setHeight("303px");
		tableExpenses.addContainerProperty("Spesenart", String.class,  null);
		tableExpenses.addContainerProperty("Betrag", Double.class,  null);
		// Allow selecting items from the table.
		tableExpenses.setSelectable(true);
		// Send changes in selection immediately to server.
		tableExpenses.setImmediate(true);
		// Handle selection change.
		tableExpenses.addValueChangeListener(new ValueChangeListener() {

			private static final long serialVersionUID = -3062037745866406218L;

			public void valueChange(ValueChangeEvent event) {
		    	buttonDelete.setEnabled(tableExpenses.getValue() != null);
		    }
		});		
		
		mainLayout.addComponent(tableExpenses, "top:17.0px;right:58.0px;left:0.0px;");
		
		// textfield_expensetype
		textfieldExpensetype = new TextField("Spesenart");
		textfieldExpensetype.setImmediate(false);
		textfieldExpensetype.setWidth("240px");
		textfieldExpensetype.setHeight("-1px");
		textfieldExpensetype.addValidator(new StringLengthValidator("Die Beschreibung muss mindestens 3 Zeichen lang sein!", 3, null, false));
		textfieldExpensetype.setRequired(true);
		textfieldExpensetype.setInvalidAllowed(false);
		textfieldExpensetype.setNullRepresentation("");
		textfieldExpensetype.setInputPrompt("z.B. Essen, Material xy, etc.");		
		mainLayout.addComponent(textfieldExpensetype, "top:371.0px;left:9.0px;");
		
		// textfield_amount
		textfieldAmount = new TextField("Betrag");
		textfieldAmount.setImmediate(false);
		textfieldAmount.setWidth("80px");
		textfieldAmount.setHeight("-1px");
		textfieldAmount.addValidator(new AmountValidator());
		textfieldAmount.setRequired(true);
		textfieldAmount.setInvalidAllowed(false);
		textfieldAmount.setNullRepresentation("");
		textfieldAmount.setInputPrompt("z.B. 5.50");	
		mainLayout.addComponent(textfieldAmount, "top:371.0px;left:260.0px;");
		
		// button_add
		buttonAdd = new Button();
		buttonAdd.setCaption("+");
		buttonAdd.setImmediate(true);
		buttonAdd.setWidth("-1px");
		buttonAdd.setHeight("-1px");
		buttonAdd.addClickListener(new Button.ClickListener() {
			/**
			 * generated serial
			 */
			private static final long serialVersionUID = 8687670334388521170L;

			public void buttonClick(ClickEvent event) {
				
				String expensetype = null;
				if( textfieldExpensetype.getValue() != null ) {
					expensetype = textfieldExpensetype.getValue();
				}
			
				String value = textfieldAmount.getValue();
				
				
				AppointmentController.Codes returnvalue = controller.addExpensetoCurrentPatient(expensetype, value);
				
				switch(returnvalue) {
				case SUCCESS:  // all OK, reload expenses
					textfieldAmount.setComponentError(null);
					textfieldExpensetype.setComponentError(null);
					buttonAdd.setComponentError(null);
					
					textfieldAmount.removeAllValidators();
					textfieldExpensetype.removeAllValidators();
					
					textfieldAmount.setValue("");
					textfieldExpensetype.setValue("");
					
					textfieldExpensetype.addValidator(new StringLengthValidator("Die Beschreibung muss mindestens 3 Zeichen lang sein!", 3, null, false));
					textfieldAmount.addValidator(new AmountValidator());
					
					reload_expenses();
					break;
				case INVALID_AMOUNT:
				case INVALID_DESCRIPTION:
					textfieldAmount.setComponentError(new UserError(returnvalue.getMessage()));
					break;
				default:
					buttonAdd.setComponentError(new SystemError(returnvalue.getMessage()));
					break;					
				}
			}
		}); 
		mainLayout.addComponent(buttonAdd, "top:371.0px;left:420.0px;");
		
		// label_waehrung
		labelCurrency = new Label();
		labelCurrency.setImmediate(false);
		labelCurrency.setWidth("-1px");
		labelCurrency.setHeight("-1px");
		labelCurrency.setValue("CHF");
		mainLayout.addComponent(labelCurrency, "top:373.0px;left:342.0px;");
		
		// label_new
		labelNew = new Label();
		labelNew.setImmediate(false);
		labelNew.setWidth("-1px");
		labelNew.setHeight("-1px");
		labelNew.setValue("Neuer Speseneintrag:");
		mainLayout.addComponent(labelNew, "top:330.0px;left:9.0px;");

		// button_delete
		buttonDelete = new Button();
		buttonDelete.setCaption("Auswahl löschen");
		buttonDelete.setImmediate(true);
		buttonDelete.setEnabled(false);
		buttonDelete.setWidth("-1px");
		buttonDelete.setHeight("-1px");
		buttonDelete.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 4045911914165531751L;

			public void buttonClick(ClickEvent event) {
				Long id_to_delete = (Long)tableExpenses.getValue();
				
				AppointmentController.Codes returnvalue = controller.deleteExepenseOfCurrentPatient(id_to_delete);
				switch(returnvalue) {
				case SUCCESS:
					Notification.show("Speseneintrag erfolgreich gelöscht!", "Here we go :)", Notification.Type.TRAY_NOTIFICATION);
					
					reload_expenses();
					break;
				default:
					buttonDelete.setComponentError(new SystemError("Löschen fehlgeschlagen! Aufgetretener Fehler (Code " + String.valueOf(returnvalue.getCode()) + "): " + returnvalue.getMessage()));
					break;
				}
			}
		}); 
		mainLayout.addComponent(buttonDelete, "top:17.0px;left:420.0px;");
		
		return mainLayout;
	}

	/**
	 * fires when the user changes the appointment
	 */
	@Override
	public void handleAppointmentChangedEvent(AppointmentChangedEvent e) {
		if(controller.getCurrentAppointment() != null)
		{
			this.reload_expenses();
		}
	}
	
	/**
	 * reloads the expenses table
	 */
	public void reload_expenses() {
		Patient patient = this.controller.getCurrentAppointment().getPatient();
		
		tableExpenses.removeAllItems();
		
		List<ExpensesEntry> expenses = patient.getExpenses();
		if(expenses == null) {
			tableExpenses.setCaption("Ungültige Speseneinträge!");
		}
		else {
			try { 
				tableExpenses.setCaption("Speseneinträge: " + Integer.toString(expenses.size()));
		
				for(ExpensesEntry entry : expenses) {
					// Add a row into the table as object array
					tableExpenses.addItem(new Object[] { entry.getExpensesDescription(), entry.getPrice() }, entry.getExpensesId());
				}	
			}
			catch(Exception ex) {
				labelNew.setValue(ex.toString());
			}
		}
	}

	/**
	 * Validator for validating the duration values
	 * @author jaggr2
	 *
	 */
    private static final class AmountValidator extends AbstractValidator<String> {

		private static final long serialVersionUID = 6829365145753673090L;

		public AmountValidator() {
            super("Der eingegebe Betrag ist ungültig! Gültiges Beispiel: 30");
        }

        @Override
        protected boolean isValidValue(String value) {
    		// Regex looks for a valid amount
        	// Null values have to be accepted
    		if (value != null && !value.matches("\\d+(\\.\\d{0,2})?")) {
                return false;
            }
    		
            return true;
        }

        @Override
        public Class<String> getType() {
            return String.class;
        }
    }
}
