package spitapp.gui;

import spitapp.controller.AppointmentChangedEvent;
import spitapp.controller.AppointmentController;
import spitapp.core.model.ExpensesEntry;
import spitapp.core.model.Patient;

import java.util.*;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.TextField;

@SuppressWarnings("serial")
public class ExpensesGuiHandler extends DetailGuiHandler {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label label_new;
	@AutoGenerated
	private Label label_currency;
	@AutoGenerated
	private Button button_add;
	@AutoGenerated
	private TextField textfield_amount;
	@AutoGenerated
	private ComboBox comboBox_expensetype;
	@AutoGenerated
	private Table table_expenses;
	
	private AppointmentController current_controller = null;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ExpensesGuiHandler(AppointmentController controller) {
		super(controller);
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// table_expenses
		table_expenses = new Table();
		table_expenses.setImmediate(false);
		table_expenses.setWidth("400px");
		table_expenses.setHeight("303px");
		table_expenses.addContainerProperty("Spesenart", String.class,  null);
		table_expenses.addContainerProperty("Betrag", Double.class,  null);
		//table_expenses.addContainerProperty("Uhrzeit",  String.class,  null);
		
		
		mainLayout.addComponent(table_expenses, "top:17.0px;right:58.0px;left:0.0px;");
		
		// comboBox_expensetype
		comboBox_expensetype = new ComboBox();
		comboBox_expensetype.setImmediate(false);
		comboBox_expensetype.setWidth("240px");
		comboBox_expensetype.setHeight("-1px");
		comboBox_expensetype.setInvalidAllowed(true);
		comboBox_expensetype.addItem("");
		comboBox_expensetype.addItem("Essen");
		comboBox_expensetype.addItem("Kino");
		comboBox_expensetype.addItem("Benzin");
		mainLayout.addComponent(comboBox_expensetype, "top:356.0px;left:0.0px;");
		
		// textfield_amount
		textfield_amount = new TextField();
		textfield_amount.setImmediate(false);
		textfield_amount.setWidth("80px");
		textfield_amount.setHeight("-1px");
		mainLayout.addComponent(textfield_amount, "top:356.0px;left:260.0px;");
		
		// button_add
		button_add = new Button();
		button_add.setCaption("+");
		button_add.setImmediate(false);
		button_add.setWidth("-1px");
		button_add.setHeight("-1px");
		button_add.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				
				String expensetype = null;
				if( comboBox_expensetype.getValue() != null ) {
					expensetype = comboBox_expensetype.getValue().toString();
				}
			
				String value = textfield_amount.getValue();
				
				
				Integer returnvalue = current_controller.addExpensetoCurrentPatient(expensetype, value);
				switch(returnvalue) {
				case 0:  // all ok, reload expenses
					textfield_amount.setCaption("");
					comboBox_expensetype.setCaption("");
					textfield_amount.setValue("");
					comboBox_expensetype.setValue("");
					reload_expenses();
					break;
				case -1: // amount value in
					textfield_amount.setCaption("Ungültiger Betrag!");
					comboBox_expensetype.setCaption("");
					break;
				case -2:
					textfield_amount.setCaption("");
					comboBox_expensetype.setCaption("Ungültige Eingabe!");
					break;
				default: // amount value in
					textfield_amount.setCaption("Unbekannter Fehler!");
					break;					
				}
			}
		}); 
		mainLayout.addComponent(button_add, "top:356.0px;left:420.0px;");
		
		// label_waehrung
		label_currency = new Label();
		label_currency.setImmediate(false);
		label_currency.setWidth("-1px");
		label_currency.setHeight("-1px");
		label_currency.setValue("CHF");
		mainLayout.addComponent(label_currency, "top:362.0px;left:355.0px;");
		
		// label_1
		label_new = new Label();
		label_new.setImmediate(false);
		label_new.setWidth("-1px");
		label_new.setHeight("-1px");
		label_new.setValue("Neuer Speseneintrag:");
		mainLayout.addComponent(label_new, "top:340.0px;left:9.0px;");
		
		return mainLayout;
	}

	@Override
	public void handleAppointmentChangedEvent(AppointmentChangedEvent e) {
		
		this.current_controller = (AppointmentController)e.getSource();
		
		this.reload_expenses();
	}
	
	public void reload_expenses() {
		Patient patient = this.current_controller.getCurrentAppointment().getPatient();
		
		List<ExpensesEntry> expenses = patient.getExpenses();
		if(expenses == null) {
			table_expenses.setCaption("Ungültige Speseneinträge!");
		}
		else {
			
				table_expenses.setCaption("Speseneinträge: " + Integer.toString(0));// + ; //expenses.size()
		
//		for(ExpensesEntry entry : expenses) {
//			// Add a row into the table as object array
//			Integer pos = (Integer)table_expenses.addItem(new Object[] { entry.getExpensesDescription(), entry.getPrice() }, null);
//		}	
			
		}
	}

}
