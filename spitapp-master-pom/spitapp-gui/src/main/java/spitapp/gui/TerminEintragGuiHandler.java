package spitapp.gui;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.HashMap;

import spitapp.core.model.TerminEintrag;
import spitapp.core.service.DatabaseService;

import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;

public class TerminEintragGuiHandler extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button button_vorwaerts;
	@AutoGenerated
	private PopupDateField dateField_datum;
	@AutoGenerated
	private Button button_rueckwaerts;
	@AutoGenerated
	private Table table_termine;
	
	public HashMap<Integer, TerminEintrag> eintraege = new HashMap<Integer, TerminEintrag>();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TerminEintragGuiHandler() {

		buildMainLayout();
		setCompositionRoot(mainLayout);

		// Initialisiere mit heutigem Datum
		DateChanged(dateField_datum.getValue());
	}
	
	public void TerminEintragChanged(Integer newTerminId) {
		table_termine.setCaption("Selected: " + table_termine.getValue());
		
		
	}
	
	public boolean clearTermine() {
		if(table_termine.removeAllItems()) {
			this.eintraege.clear();
			return true;
		}
		return false;
	}
	
	public boolean addTermin(TerminEintrag termin) {
		Integer pos = (Integer)table_termine.addItem(new Object[] { termin.getPatient().getFirstName() + " " + termin.getPatient().getLastName(), termin.getTerminDate().toString() }, null);
		if( pos != null) {
			this.eintraege.put(pos, termin);
			return true;
		}
		return false;
	}
	
	public void DateChanged(Date newDate) {
		clearTermine();
		
		DatabaseService dbservice = new DatabaseService();
		List<TerminEintrag> termine = dbservice.getTermine(newDate);
		
		for (TerminEintrag termin: termine) {
			this.addTermin(termin);
		}
		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// table_termine
		table_termine = new Table("Termine");
		table_termine.setImmediate(false);
		table_termine.setWidth("80.0%");
		table_termine.setHeight("-1px");
		/* Define the names and data types of columns.
		 * The "default value" parameter is meaningless here. */
		table_termine.addContainerProperty("Patient", String.class,  null);
		table_termine.addContainerProperty("Uhrzeit",  String.class,  null);
		// Allow selecting items from the table.
		table_termine.setSelectable(true);

		// Send changes in selection immediately to server.
		table_termine.setImmediate(true);

		// Handle selection change.
		table_termine.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	TerminEintragChanged((Integer)table_termine.getValue());
		        
		    }
		});
		
		mainLayout.addComponent(table_termine, "top:17.0px;left:20.0px;");
		
		// button_rueckwaerts
		button_rueckwaerts = new Button();
		button_rueckwaerts.setCaption("Rückwärts");
		button_rueckwaerts.setImmediate(true);
		button_rueckwaerts.setWidth("-1px");
		button_rueckwaerts.setHeight("-1px");
		button_rueckwaerts.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				
				Calendar calendar = new GregorianCalendar();
				calendar.setTime(dateField_datum.getValue());
				calendar.add(Calendar.DAY_OF_MONTH, -1);
				dateField_datum.setValue(calendar.getTime());
			}
		}); 
		mainLayout.addComponent(button_rueckwaerts, "top:357.0px;left:20.0px;");
		
		// dateField_datum
		dateField_datum = new PopupDateField();
		dateField_datum.setImmediate(true);
		dateField_datum.setWidth("-1px");
		dateField_datum.setHeight("-1px");
		dateField_datum.setDateFormat("dd-MM-yyyy");
		dateField_datum.setValue(new Date());
		dateField_datum.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		        DateChanged(dateField_datum.getValue());
		    }
		});
		mainLayout.addComponent(dateField_datum, "top:357.0px;left:106.0px;");
		
		
		// button_vorwaerts
		button_vorwaerts = new Button();
		button_vorwaerts.setCaption("Vorwärts");
		button_vorwaerts.setImmediate(true);
		button_vorwaerts.setWidth("-1px");
		button_vorwaerts.setHeight("-1px");
		button_vorwaerts.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				Calendar calendar = new GregorianCalendar();
				calendar.setTime(dateField_datum.getValue());
				calendar.add(Calendar.DAY_OF_MONTH, 1);
				dateField_datum.setValue(calendar.getTime());
			}
		}); 
		mainLayout.addComponent(button_vorwaerts, "top:357.0px;left:208.0px;");
		
		return mainLayout;
	}
}
